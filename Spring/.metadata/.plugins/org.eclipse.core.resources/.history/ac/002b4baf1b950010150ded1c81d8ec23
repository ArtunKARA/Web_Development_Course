package com.ferkan.config;

import java.util.Optional;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.ferkan.model.User;
import com.ferkan.repository.UserRepostory;

@Configuration
public class AppConfig {

    private final UserRepostory userRepostory;

    public AppConfig(UserRepostory userRepostory) {
        this.userRepostory = userRepostory;
    }

    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // Artık interface yerine lambda ile daha temiz:
    @Bean
    public UserDetailsService userDetailsService() {
        return username -> userRepostory.findByUsername(username)
                .<UserDetails>orElseThrow(() -> new UsernameNotFoundException("User not found: " + username));
    }

    // AuthenticationProvider hâlâ kullanılabiliyor ama AuthenticationManager öneriliyor
    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider(passwordEncoder());
        authProvider.setUserDetailsService(userDetailsService());
        return authProvider;
    }

    // AuthenticationManager artık SecurityFilterChain ile birlikte kullanılıyor
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}
