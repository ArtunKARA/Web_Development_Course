package com.ferkan.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.ferkan.jwt.JwtAuthhenticationFilter; // SENDE NASILSA ÖYLE BIRAKTIM

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    public static final String AUTHENTICATE = "/authentication";
    public static final String REGISTER = "/register";

    private final JwtAuthhenticationFilter jwtAuthhenticationFilter;
    private final AuthenticationManager authenticationManager;

    public SecurityConfig(JwtAuthhenticationFilter jwtAuthhenticationFilter,
                          AuthenticationManager authenticationManager) {
        this.jwtAuthhenticationFilter = jwtAuthhenticationFilter;
        this.authenticationManager = authenticationManager;
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                // Görseldeki pattern'e uygun: önce permitAll
                .requestMatchers(AUTHENTICATE, REGISTER, "/api/auth/**", "/api/products", "/api/categories").permitAll()
                .requestMatchers("/api/product/**", "/api/category/**").hasRole("ADMIN")
                .requestMatchers("/api/profile/**").authenticated()
                .anyRequest().authenticated()
            )
            .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

            // GÖRSELDEKİ GİBİ: provider yerine authenticationManager veriyoruz
            .authenticationManager(authenticationManager)

            // JWT filtresi UsernamePasswordAuthenticationFilter'dan önce
            .addFilterBefore(jwtAuthhenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}
